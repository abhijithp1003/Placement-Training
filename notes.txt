----------------- OOPS -----------------

- class is a container of methods and variables.
- object is a member of class
- to call either methods or variable we should use class or object inside main part


--- variables ---

- local variable: has scope only in methods
- instance variable: variable which all object have their own unique value for
- class variables: variable whose value is common for all objects
- global variable: has scope globally

eg:
	class LC37:
    		def student(self, name):
        		self.name = name
    		def display(self):
				self.nature()
       			print("The name is {}".format(self.name))
			def nature(self):
				print("He ois very guy")
	a1 = LC37()
	a2 = LC37()
	a1.student("VIRAT")
	a2.student("Adarsh")
	a1.display()
	a2.display()
	

	- no global variables
	- instance variable: self.name
	- no class variable
	- local variable: name(inside student)

=============================================================================================================================================================
--- EXAMPLE PROGRAM ---

class c:
    col = "NMAMIT, NITTE"
    def student(self, name, mark):
        self.name = name
        self.mark = mark
    def passfail(self):
        if(self.mark > 40):
            return "CLEAR"
        else:
            return "FAIL"
    def modify(self, grace):
        self.mark += grace

    def display(self):
        print("Name : {}".format(self.name))
        print("college : {}".format(self.col))
        print("Mark: {}".format(self.mark))
        print("Status : {}".format(self.passfail()))
s1 = c()
s2 = c()


s1.student("Nikitha", 38)
s2.student("Pooja", 70)
print()
s1.display()
print()
s2.display()
print()
s1.modify(3)
s1.display()
print()


=============================================================================================================================================================













import os

class Student:
    """Represents a student with name, marks, percentage, and rank."""
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks
        self.total_marks = sum(marks)
        # Assuming each of the 4 subjects is out of 100
        self.percentage = self.total_marks / 4.0
        self.rank = 0

    def display(self):
        """Displays the student's details."""
        print("\n--- Student Details ---")
        print(f"Name: {self.name}")
        print(f"Marks in 4 subjects: {self.marks}")
        print(f"Percentage: {self.percentage:.2f}%")
        print(f"Rank: {self.rank}")
        print("-----------------------\n")

class college:
    """Manages a collection of Student objects."""
    def __init__(self):
        self.students = []

    def _update_ranks(self):
        """Updates the ranks of all students based on their percentage."""
        self.students.sort(key=lambda student: student.percentage, reverse=True)
        for i, student in enumerate(self.students):
            student.rank = i + 1

    def add_new_student(self):
        """Adds a new student by taking input from the user."""
        print("\n--- Add New Student ---")
        name = input("Enter student name: ")
        marks = []
        for i in range(4):
            while True:
                try:
                    mark = float(input(f"Enter marks for subject {i+1}: "))
                    if 0 <= mark <= 100:
                        marks.append(mark)
                        break
                    else:
                        print("Invalid marks. Please enter a value between 0 and 100.")
                except ValueError:
                    print("Invalid input. Please enter a number.")
        
        student = Student(name, marks)
        self.students.append(student)
        self._update_ranks()
        print(f"\nStudent '{name}' added successfully!")

    def view_topper(self):
        """Displays the topper's details."""
        print("\n--- Topper ---")
        if not self.students:
            print("No students in the system yet.")
        else:
            topper = self.students[0]
            print(f"Topper is: {topper.name} with {topper.percentage:.2f}%")

    def view_individual_student_status(self):
        """Views the status of an individual student."""
        print("\n--- Individual Student Status ---")
        if not self.students:
            print("No data stored.")
            return

        name = input("Enter student name to view status: ")
        student_found = None
        for student in self.students:
            if student.name.lower() == name.lower():
                student_found = student
                break
        
        if student_found:
            student_found.display()
        else:
            print(f"Student with name '{name}' not found.")

    def status_menu(self):
        """Displays the status sub-menu."""
        while True:
            print("\n--- Status Menu ---")
            print("1. View Topper")
            print("2. Individual Student Status")
            print("3. Back to Main Menu")
            
            choice = input("Enter choice: ")

            if choice == '1':
                self.view_topper()
            elif choice == '2':
                self.view_individual_student_status()
            elif choice == '3':
                break
            else:
                print("Invalid choice, please try again.")

def main():
    c = college()

    while True:
        print("\n===== Main Menu =====")
        print("1. Add New Student")
        print("2. View Status")
        print("3. Exit")
        
        choice = input("Enter choice: ")

        if choice == '1':
            c.add_new_student()
        elif choice == '2':
            c.status_menu()
        elif choice == '3':
            print("Exiting program. Goodbye!")
            break
        else:
            print("Invalid choice, please try again.")

if __name__ == "__main__":
    main()


    puzzle based question:

    theres a tall flagpost, height of tower = x meter
    theres a monkrey at botom of towrr.. aim of mok=nkey is to reach top of tower
    1st minute it move up a meter
    2nd minute it will move down b meter
    what is the minimum time required to reach top of tower


    test case x = 30 meter
    a = 10 meter
    b = 5 meter